{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","setGridApi","setGridColumnApi","make","model","price","rowData","Navbar","bg","variant","style","height","Math","floor","window","innerHeight","Brand","className","width","innerWidth","animateRows","enableCellChangeFlash","getRowNodeId","data","onGridReady","params","api","columnApi","field","sortable","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPA6DeA,G,MAnDH,WAAO,IAAD,EACgBC,mBAAS,MADzB,mBACEC,GADF,aAE4BD,mBAAS,MAFrC,mBAEQE,GAFR,aAIgBF,mBAAS,CACnC,CAACG,KAAM,SAAUC,MAAO,SAAUC,MAAO,MACzC,CAACF,KAAM,OAAQC,MAAO,SAAUC,MAAO,MACvC,CAACF,KAAM,UAAWC,MAAO,SAAUC,MAAO,MAC1C,CAACF,KAAM,UAAWC,MAAO,SAAUC,MAAO,MAC1C,CAACF,KAAM,UAAWC,MAAO,SAAUC,MAAO,MAC1C,CAACF,KAAM,UAAWC,MAAO,SAAUC,MAAO,MAC1C,CAACF,KAAM,UAAWC,MAAO,SAAUC,MAAO,MAC1C,CAACF,KAAM,UAAWC,MAAO,SAAUC,MAAO,MAC1C,CAACF,KAAM,UAAWC,MAAO,SAAUC,MAAO,MAC1C,CAACF,KAAM,UAAWC,MAAO,SAAUC,MAAO,MAC1C,CAACF,KAAM,UAAWC,MAAO,SAAUC,MAAO,MAC1C,CAACF,KAAM,UAAWC,MAAO,SAAUC,MAAO,MAC1C,CAACF,KAAM,UAAWC,MAAO,SAAUC,MAAO,QAjBhC,mBAIPC,EAJO,UAoBd,OACI,qCACI,cAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,OAAOC,MAAO,CACpCC,OAAQC,KAAKC,MAAMC,OAAOC,YAAc,KAD5C,SAGI,cAACR,EAAA,EAAOS,MAAR,sCAEJ,qBAAKC,UAAU,gBAAgBP,MAAO,CAClCQ,MAAOJ,OAAOK,WACdR,OAAQC,KAAKC,MAA2B,GAArBC,OAAOC,YAAmB,KAFjD,SAII,eAAC,cAAD,CACIK,aAAa,EACbC,uBAAuB,EACvBC,aAAe,SAAAC,GAAI,OAAIA,EAAKpB,MAC5BqB,YACI,SAAAC,GACIxB,EAAWwB,EAAOC,KAClBxB,EAAiBuB,EAAOE,YAGhCrB,QAASA,EAVb,UAWI,cAAC,eAAD,CAAcsB,MAAM,OAAOC,UAAU,EAAMC,QAAQ,IACnD,cAAC,eAAD,CAAcF,MAAM,QAAQC,UAAU,EAAMC,QAAQ,IACpD,cAAC,eAAD,CAAcF,MAAM,QAAQC,UAAU,EAAMC,QAAQ,cC1CzDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.51a24760.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-dark.css';\nimport { Navbar } from 'react-bootstrap';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nconst App = () => {\n    const [gridApi, setGridApi] = useState(null);\n    const [gridColumnApi, setGridColumnApi] = useState(null);\n\n    const [rowData, setRowData] = useState([\n        {make: \"Toyota\", model: \"Celica\", price: 35000},\n        {make: \"Ford\", model: \"Mondeo\", price: 32000},\n        {make: \"Porsche\", model: \"Boxter\", price: 72000},\n        {make: \"Porsche\", model: \"Boxter\", price: 72000},\n        {make: \"Porsche\", model: \"Boxter\", price: 72000},\n        {make: \"Porsche\", model: \"Boxter\", price: 72000},\n        {make: \"Porsche\", model: \"Boxter\", price: 72000},\n        {make: \"Porsche\", model: \"Boxter\", price: 72000},\n        {make: \"Porsche\", model: \"Boxter\", price: 72000},\n        {make: \"Porsche\", model: \"Boxter\", price: 72000},\n        {make: \"Porsche\", model: \"Boxter\", price: 72000},\n        {make: \"Porsche\", model: \"Boxter\", price: 72000},\n        {make: \"Porsche\", model: \"Boxter\", price: 72000}\n    ]);\n\n    return (\n        <>\n            <Navbar bg=\"dark\" variant=\"dark\" style={{\n                height: Math.floor(window.innerHeight / 15)\n            }}>\n                <Navbar.Brand>Among Us: Competitive</Navbar.Brand>\n            </Navbar>\n            <div className=\"ag-theme-dark\" style={{ \n                width: window.innerWidth, \n                height: Math.floor(window.innerHeight * 14 / 15)\n            }}>\n                <AgGridReact\n                    animateRows={true}\n                    enableCellChangeFlash={true}\n                    getRowNodeId={ data => data.make }\n                    onGridReady={\n                        params => {\n                            setGridApi(params.api);\n                            setGridColumnApi(params.columnApi);\n                        }\n                    }\n                    rowData={rowData}>\n                    <AgGridColumn field=\"make\" sortable={true} filter={true}></AgGridColumn>\n                    <AgGridColumn field=\"model\" sortable={true} filter={true}></AgGridColumn>\n                    <AgGridColumn field=\"price\" sortable={true} filter={true}></AgGridColumn>\n                </AgGridReact>\n            </div>\n        </>\n    );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}