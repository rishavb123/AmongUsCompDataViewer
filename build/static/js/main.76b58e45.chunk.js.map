{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["rows","cols","fetch","then","res","json","data","catch","console","log","App","useState","setGridApi","setGridColumnApi","colDefs","rowData","Navbar","bg","variant","style","height","Math","floor","window","innerHeight","Brand","className","width","innerWidth","animateRows","enableCellChangeFlash","getRowNodeId","make","onGridReady","params","api","columnApi","map","def","field","sortable","filter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPASIA,G,MAAO,IACPC,EAAO,GAEXC,MAAM,8BACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACHL,EAAOK,EAAKL,KACZD,EAAOM,EAAKN,QAEfO,MAAMC,QAAQC,KAEnB,IAuCeC,EAvCH,WAAO,IAAD,EACgBC,mBAAS,MADzB,mBACEC,GADF,aAE4BD,mBAAS,MAFrC,mBAEQE,GAFR,aAIgBF,mBAASV,GAJzB,mBAIPa,EAJO,aAKgBH,mBAASX,IALzB,mBAKPe,EALO,UAOd,OACI,qCACI,cAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,OAAOC,MAAO,CACpCC,OAAQC,KAAKC,MAAMC,OAAOC,YAAc,KAD5C,SAGI,cAACR,EAAA,EAAOS,MAAR,sCAEJ,qBAAKC,UAAU,gBAAgBP,MAAO,CAClCQ,MAAOJ,OAAOK,WACdR,OAAQC,KAAKC,MAA2B,GAArBC,OAAOC,YAAmB,KAFjD,SAII,cAAC,cAAD,CACIK,aAAa,EACbC,uBAAuB,EACvBC,aAAe,SAAAzB,GAAI,OAAIA,EAAK0B,MAC5BC,YACI,SAAAC,GACItB,EAAWsB,EAAOC,KAClBtB,EAAiBqB,EAAOE,YAGhCrB,QAASA,EAVb,SAWKD,EAAQuB,KAAI,SAAAC,GAAG,OAAI,cAAC,eAAD,CAAcC,MAAM,MAAMC,UAAU,EAAMC,QAAQ,eCrC3EC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzC,MAAK,YAAkD,IAA/C0C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.76b58e45.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-dark.css';\nimport { Navbar } from 'react-bootstrap';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nlet rows = [];\nlet cols = [];\n\nfetch('http://localhost:4000/data')\n    .then(res => res.json())\n    .then((data) => {\n        cols = data.cols\n        rows = data.rows;\n    })\n    .catch(console.log)\n\nconst App = () => {\n    const [gridApi, setGridApi] = useState(null);\n    const [gridColumnApi, setGridColumnApi] = useState(null);\n\n    const [colDefs, setColDefs] = useState(cols);\n    const [rowData, setRowData] = useState(rows);\n\n    return (\n        <>\n            <Navbar bg=\"dark\" variant=\"dark\" style={{\n                height: Math.floor(window.innerHeight / 15)\n            }}>\n                <Navbar.Brand>Among Us: Competitive</Navbar.Brand>\n            </Navbar>\n            <div className=\"ag-theme-dark\" style={{ \n                width: window.innerWidth, \n                height: Math.floor(window.innerHeight * 14 / 15)\n            }}>\n                <AgGridReact\n                    animateRows={true}\n                    enableCellChangeFlash={true}\n                    getRowNodeId={ data => data.make }\n                    onGridReady={\n                        params => {\n                            setGridApi(params.api);\n                            setGridColumnApi(params.columnApi);\n                        }\n                    }\n                    rowData={rowData}>\n                    {colDefs.map(def => <AgGridColumn field=\"def\" sortable={true} filter={true} />)}\n                    {/* <AgGridColumn field=\"make\" sortable={true} filter={true}></AgGridColumn>\n                    <AgGridColumn field=\"model\" sortable={true} filter={true}></AgGridColumn>\n                    <AgGridColumn field=\"price\" sortable={true} filter={true}></AgGridColumn> */}\n                </AgGridReact>\n            </div>\n        </>\n    );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}